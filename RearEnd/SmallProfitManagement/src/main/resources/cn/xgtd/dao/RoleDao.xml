<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xgtd.dao.RoleDao">

<resultMap id="roleMap" type="cn.xgtd.domain.user.Role">
        <id property="rId" column="r_id"></id>
        <result property="databaseMenus" column="menus"></result>
        <result property="name" column="NAME"></result>
        <result property="createTime" column="mr_create_time"></result>
        <result property="createAuthorName" column="mrc_creator_name"></result>
        <result property="createAuthorId" column="create_author_id"></result>
        <result property="lastTime" column="mr_last_time"></result>
        <result property="lastAuthorName" column="mrl_last_name"></result>
        <result property="roleBasicsId" column="role_ids"></result>
</resultMap>


    <!--添加角色-->
    <insert id="addRole" parameterType="cn.xgtd.domain.user.Role" useGeneratedKeys="true" keyProperty="rId" keyColumn="r_id">
     insert into management_role (menus,name,create_time,create_author_id,last_time,last_author_id,role_ids)
        values(#{databaseMenus},#{name},#{createTime},#{createAuthorId},#{lastTime},#{lastAuthorId},#{roleBasicsId})
    </insert>

     <!--添加用户关系-->
    <insert id="addRoleRelationship" parameterType="java.lang.Integer">
     insert into management_role_relationship (descendant_id,father_id)
        values(#{addedUserId},#{createAuthorId})
    </insert>



   <!--查询所有子节点角色-->
   <select id="findRoleList"  resultMap="roleMap">
    SELECT
        mr.r_id,
        mr.menus,
        mr.NAME,
        mr.role_ids,
        mr.create_time AS mr_create_time,
        mr.create_author_id,
        mr.last_time AS mr_last_time,
        mrc.user_name AS mrc_creator_name,
        mrl.user_name AS mrl_last_name
    FROM
        management_role mr
        LEFT JOIN management_user mrc ON mrc.u_id = mr.create_author_id
        LEFT JOIN management_user mrl ON mrl.u_id = mr.last_author_id
    WHERE
        mr.sign = 0 AND(
        mr.r_id IN (
        SELECT
            r_id
        FROM
            management_role
        WHERE
            create_author_id IN ( SELECT descendant_id FROM ( SELECT descendant_id FROM management_role_relationship WHERE FIND_IN_SET( descendant_id, GET_CHILD_NODE ( #{uId} ) ) ) AS descendant_id )
        )
        OR mr.r_id IN (
        SELECT
            role_id
        FROM
            management_user
        WHERE
        u_id IN ( SELECT descendant_id FROM management_role_relationship WHERE FIND_IN_SET( descendant_id, GET_CHILD_NODE ( #{uId} ) ) )
        )
    )
      ORDER BY
	mr.last_time DESC
    </select>

    <!--查询指定角色-->
    <select id="findRole" resultMap="roleMap">
        SELECT
            mr.r_id,
            mr.menus,
            mr.NAME,
            mr.role_ids,
            mr.create_time AS mr_create_time,
            mr.create_author_id,
            mr.last_time AS mr_last_time,
            mrc.user_name AS mrc_creator_name,
            mrl.user_name AS mrl_last_name
        FROM
            management_role  mr
            LEFT JOIN management_user mrc ON mrc.u_id = mr.create_author_id
            LEFT JOIN management_user mrl ON mrl.u_id = mr.last_author_id
        WHERE
            r_id = #{role}
    </select>

    <!--查询指定角色名数量-->
    <select id="findUserRepeat" resultType="java.lang.Integer">
        select count(name) FROM management_role WHERE name = #{name} AND r_id <![CDATA[!= ]]> #{rId} AND sign = 0
    </select>

      <!--逻辑删除角色-->
       <update id="deleteRole">
            update management_role set sign = 1 where r_id = #{rId}
       </update>

        <!--编辑角色-->
       <update id="updateRole" parameterType="cn.xgtd.domain.user.Role">
            update management_role set menus = #{databaseMenus},last_time = #{lastTime},last_author_id = #{lastAuthorId} ,role_ids = #{roleBasicsId} where  r_id =#{rId}
       </update>

       <!--查询基本可创建的角色-->
       <select id="findBasicRole"  resultMap="roleMap">
        SELECT
            mr.r_id,
            mr.menus,
            mr.NAME,
            mr.create_time AS mr_create_time,
            mr.create_author_id,
            mr.last_time AS mr_last_time,
            mrc.user_name AS mrc_creator_name,
            mrl.user_name AS mrl_last_name
        FROM
            management_role  mr
            LEFT JOIN management_user mrc ON mrc.u_id = mr.create_author_id
            LEFT JOIN management_user mrl ON mrl.u_id = mr.last_author_id
        WHERE
            mr.r_id in
             <foreach collection="roleIds" item="roleIds" open="(" separator="," close=")">
                    #{roleIds}
                </foreach>

         ORDER BY mr.last_time DESC

       </select>

        <!--查询可创建的角色id-->
       <select id="findRoleIds" resultType="java.lang.String">
            SELECT mr.role_ids FROM management_user mu  LEFT JOIN  management_role mr ON mu.role_id = mr.r_id WHERE  mu.u_id = #{uId}
       </select>




</mapper>