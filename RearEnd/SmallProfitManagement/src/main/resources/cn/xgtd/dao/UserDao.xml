<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xgtd.dao.UserDao">

    <resultMap id="findUserRoleMap" type="cn.xgtd.domain.user.User">
        <id property="uId" column="u_id"></id>
        <result property="userName" column="user_name"></result>
        <result property="password" column="password"></result>
        <result property="createTime" column="mu_create_time"></result>
        <result property="roleId" column="role_id"></result>
        <result property="email" column="email"></result>
        <result property="phone" column="phone"></result>
        <result property="creatorId" column="creator_id"></result>
        <result property="creatorName" column="ma_creator_name"></result>
        <result property="lastTime" column="mu_last_time"></result>
        <result property="lastAuthorName" column="ms_last_name"></result>
     <association property="role" resultMap="roleMap">
     </association>

</resultMap>

<resultMap id="roleMap" type="cn.xgtd.domain.user.Role">
        <id property="rId" column="r_id"></id>
        <result property="databaseMenus" column="menus"></result>
        <result property="name" column="name"></result>
        <result property="createTime" column="mr_create_time"></result>
        <result property="createAuthorName" column="mrc_creator_name"></result>
        <result property="createAuthorId" column="create_author_id"></result>
        <result property="lastTime" column="mr_last_time"></result>
        <result property="lastAuthorName" column="mrl_last_name"></result>
</resultMap>


    <!--查询管理用户密码-->
    <select id="findPassword" parameterType="java.lang.String" resultType="java.lang.String">
        SELECT `password` FROM  management_user WHERE user_name = #{userName}
    </select>
    <!--询用户以用户角色-->
    <select id="findUserRole" parameterType="java.lang.String" resultMap="findUserRoleMap">
        SELECT
            mu.u_id,
            mu.user_name,
            mu.create_time AS mu_create_time,
            mu.role_id,
            mu.email,
            mu.phone,
            mu.creator_id,
            mu.last_time AS mu_last_time,
            mr.r_id,
            mr.menus,
            mr.NAME,
            mr.create_time AS mr_create_time,
            mr.create_author_id,
            mr.last_time AS mr_last_time,
            ms.user_name AS ms_last_name,
            ma.user_name AS ma_creator_name,
            mrc.user_name AS mrc_creator_name,
            mrl.user_name AS mrl_last_name
        FROM
            management_user mu
            LEFT JOIN management_user ms ON mu.last_author_id = ms.u_id
            LEFT JOIN management_user ma ON mu.creator_id = ma.u_id
            LEFT JOIN management_role mr ON mu.role_id = mr.r_id
            LEFT JOIN management_user mrc ON mrc.u_id = mr.create_author_id
            LEFT JOIN management_user mrl ON mrl.u_id = mr.last_author_id
        WHERE
            mu.user_name = #{userName}

     </select>

     <!--查询用户名是否重复-->
       <select id="findUserRepeat" resultType="java.lang.Integer">
            select count(user_name) FROM management_user WHERE user_name = #{userName}
        </select>

      <!--新增用户-->
     <insert id="addUser" useGeneratedKeys="true" keyProperty="uId" keyColumn="u_id">
            insert into management_user (user_name,password,role_id,create_time,email,phone,creator_id)
            values(#{userName},#{password},#{roleId},#{createTime},#{email},#{phone},#{creatorId})
       </insert>

       <!--修改角色关系-->
       <update id="updateRoleRelationship">
            update management_user set role_id = #{rId} where u_id = #{uId}
       </update>

       <!--查询创建的用户以及子用户-->
       <select id="findUser" resultMap="findUserRoleMap">
            SELECT
            mu.u_id,
            mu.user_name,
            mu.create_time AS mu_create_time,
            mu.role_id,
             mu.password,
            mu.email,
            mu.phone,
            mu.creator_id,
            mu.last_time AS mu_last_time,
            mr.r_id,
            mr.menus,
            mr.NAME,
            mr.create_time AS mr_create_time,
            mr.create_author_id,
            mr.last_time AS mr_last_time,
            ms.user_name AS ms_last_name,
            ma.user_name AS ma_creator_name,
            mrc.user_name AS mrc_creator_name,
            mrl.user_name AS mrl_last_name
            FROM
                management_user mu
                LEFT JOIN management_user ms ON mu.last_author_id = ms.u_id
                LEFT JOIN management_user ma ON mu.creator_id = ma.u_id
                LEFT JOIN management_role mr ON mu.role_id = mr.r_id
                LEFT JOIN management_user mrc ON mrc.u_id = mr.create_author_id
                LEFT JOIN management_user mrl ON mrl.u_id = mr.last_author_id
            WHERE
                mu.u_id IN (
                SELECT
                    descendant_id
                FROM
                ( SELECT descendant_id FROM management_role_relationship WHERE FIND_IN_SET( descendant_id, GET_CHILD_NODE ( #{uId} )) ) AS role_relationship
                )
       </select>



</mapper>